# https://stackoverflow.com/questions/4798654/modular-multiplicative-inverse-function-in-python

def gcd(a, b):
    if a == 0:
        return b, 0, 1

    g, y, x = gcd(b % a, a)
    return g, x - (b // a) * y, y


def modinv(a, m):
    g, x, y = gcd(a, m)
    return x % m

e = 65537
n = 248501410365662412791489552646042256782092770118253438700194718631291036762726489658495565276550205113648626040596191969135846656414394584577305526761671104277390765264806022908497647300596494542202565022133435383403344333672279722534625284520459706609569974491538689429548817677759350947931780871046796607829
dp = 13026685992320376966900872608865420374627539408788613307094830638345728123427345410810495082016593339528583880478309351125854158459979947140005048595481921

c = 194048013822218245260658018019940874060627700835842604475987702337533801266490182061968998210807564778328557627772974110046885380635225974269865976518335375789734689098164529086561756412074742698644530189076800227300946408167039318949544794351233987752575608106800908043533012088081995031010618521695843625062


l = dp * e - 1
p = 0
for k in range(1, e):
    if l%k == 0:
        p = (l//k + 1)
        if n%p == 0:
            q = n//p
            t = (p-1)*(q-1)
            dec = pow(c,modinv(e,t),n)
            dec = hex(dec)[2:]
            
            flag = ''
            for i in range(0, len(dec), 2):
                flag += chr(int(dec[i:i+2],16))
            
            print(flag)